name: Docker Deployment

on:
  push:
    branches: [ "main", "dev" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_REPO: ${{ github.repository }}
  # working folder on ssh server
  TMP_FOLDER: /tmp/github/${{ github.sha }}
  # Type of deployment
  DEPLOY: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}


jobs:
  build-and-push-image-frontend:
    name: Build and Push Frontend Image
    runs-on: ubuntu-latest
    env:
      MODULE_DIR: frontend
    defaults:
      run:
        working-directory: './${{ env.MODULE_DIR }}'
    outputs:
      src_changed: ${{ steps.filter.outputs.src }}

    permissions:
      packages: write # to be able to publish Docker images
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Only run the build if files in the Mobile/ directory changed
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref_name }}
          filters: |
            src:
              - '${{ env.MODULE_DIR }}/**'

      - name: Setup Node.js
        if: steps.filter.outputs.src == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install dependencies
        if: steps.filter.outputs.src == 'true'
        run: npm clean-install
      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        if: steps.filter.outputs.src == 'true'
        run: npm audit signatures
      - name: Release
        if: steps.filter.outputs.src == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          HUSKY: 0 # disable husky for CI
        run: npx semantic-release

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: steps.filter.outputs.src == 'true'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        if: steps.filter.outputs.src == 'true'
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: steps.filter.outputs.src == 'true'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: get-npm-version
        if: steps.filter.outputs.src == 'true'
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./${{ env.MODULE_DIR }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: steps.filter.outputs.src == 'true'
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}/${{ env.MODULE_DIR }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value={{branch}}-v${{steps.package-version.outputs.current-version}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=sha,prefix={{branch}}-
          labels: |
            maintainer=${{ github.actor }}
            org.opencontainers.image.title=Portfolio Website Frontend
            org.opencontainers.image.description=Portfolio Website Frontend using Vue.js and Vite
            org.opencontainers.image.version=${{steps.package-version.outputs.current-version}}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: steps.filter.outputs.src == 'true'
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./${{ env.MODULE_DIR }}
          file: ./${{ env.MODULE_DIR }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: steps.filter.outputs.src == 'true'
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  build-and-push-image-backend:
    name: Build and Push Backend Image
    runs-on: ubuntu-latest
    env:
      MODULE_DIR: backend
    defaults:
      run:
        working-directory: './${{ env.MODULE_DIR }}'
    outputs:
      src_changed: ${{ steps.filter.outputs.src }}
        
    permissions:
      packages: write # to be able to publish Docker images
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Only run the build if files in the Mobile/ directory changed
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref_name }}
          filters: |
            src:
              - '${{ env.MODULE_DIR }}/**'
      
      - name: Extract Maven project version
        if: steps.filter.outputs.src == 'true'
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: steps.filter.outputs.src == 'true'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        if: steps.filter.outputs.src == 'true'
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: steps.filter.outputs.src == 'true'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: steps.filter.outputs.src == 'true'
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}/${{ env.MODULE_DIR }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value={{branch}}-v${{ steps.project.outputs.version }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=sha,prefix={{branch}}-
          labels: |
            maintainer=${{ github.actor }}
            org.opencontainers.image.title=Portfolio Website Backend
            org.opencontainers.image.description=Portfolio Website Backend using Java Spring and Maven
            org.opencontainers.image.version=${{ steps.project.outputs.version }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: steps.filter.outputs.src == 'true'
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./${{ env.MODULE_DIR }}
          file: ./${{ env.MODULE_DIR }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: steps.filter.outputs.src == 'true'
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  prepare-work-folder:
    if: success() && needs.build-and-push-image-frontend.outputs.src_changed == 'true' || needs.build-and-push-image-backend.outputs.src_changed == 'true'
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image-frontend
      - build-and-push-image-backend
    steps:
      - name: Create temp folder for deploying
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            mkdir -p ${{ env.TMP_FOLDER}}
            cd ${{ env.TMP_FOLDER}}
            git init
            git remote add -f origin git@github.com:${{ github.repository }}.git
            git config core.sparseCheckout true
            echo "kube" >> .git/info/sparse-checkout
            git pull origin ${{ github.ref_name }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: prepare-work-folder 
    if: success()
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd ${{ env.TMP_FOLDER}}
            sudo kubectl apply -f ./kube/${{ env.DEPLOY }}-frontend-deployment.yaml
            sudo kubectl apply -f ./kube/${{ env.DEPLOY }}-backend-deployment.yaml

            sudo kubectl -n ${{ env.DEPLOY }} rollout restart deployment website-frontend
            sudo kubectl -n ${{ env.DEPLOY }} rollout restart deployment website-backend

  cleanup:
    if: always()
    runs-on: ubuntu-latest
    needs: [prepare-work-folder, deploy]
    steps:
      - name: Clean up
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            rm -rf ${{ env.TMP_FOLDER}}

name: Docker Deployment

on:
  push:
    branches: [ "main", "dev" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # working folder on ssh server
  TMP_FOLDER: /tmp/github/${{ github.sha }}
  # Type of deployment
  DEPLOY: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}


jobs:
  release-frontend:
    permissions:
        contents: write
    runs-on: ubuntu-latest # Runs on an Ubuntu runner

    defaults:
      run:
        working-directory: 'frontend'

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22.x" # Use the Node.js version required for your project

      # Step 3: Cache Node.js modules to speed up future builds
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Step 4: Install dependencies
      - name: Install Dependencies
        run: npm ci

      # Step 5: Run semantic-release
      - name: Run Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provide the GitHub token for authentication

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: release-frontend
    if: success()
    strategy:
      fail-fast: false
      matrix:
        include:
          - module: frontend
          - module: backend
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.module }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./${{ matrix.module }}
          file: ./${{ matrix.module }}/Dockerfile
          push: true
          tags: |
            # set latest tag for master branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            # dynamically set the branch name as a prefix
            type=sha,prefix={{branch}}-
            # dynamically set the branch name and sha as a custom tag
            type=raw,value=mytag-{{branch}}-{{sha}}
          labels: |
            org.opencontainers.image.created={{commit_date 'YYYY-MM-DDTHH:mm:ss.SSS[Z]'}}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  prepare-work-folder:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: success()
    steps:
      - name: Create temp folder for deploying
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            mkdir -p ${{ env.TMP_FOLDER}}
            cd ${{ env.TMP_FOLDER}}
            git init
            git remote add -f origin git@github.com:${{ github.repository }}.git
            git config core.sparseCheckout true
            echo "kube" >> .git/info/sparse-checkout
            git pull origin ${{ github.ref_name }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: prepare-work-folder
    if: success()
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd ${{ env.TMP_FOLDER}}
            sudo kubectl apply -f ./kube/${{ env.DEPLOY }}-frontend-deployment.yaml
            sudo kubectl apply -f ./kube/${{ env.DEPLOY }}-backend-deployment.yaml

            sudo kubectl -n ${{ env.DEPLOY }} rollout restart deployment website-frontend
            sudo kubectl -n ${{ env.DEPLOY }} rollout restart deployment website-backend

  cleanup:
    if: always()
    runs-on: ubuntu-latest
    needs: [prepare-work-folder, deploy]
    steps:
      - name: Clean up
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            rm -rf ${{ env.TMP_FOLDER}}
